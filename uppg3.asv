% Kod för uppgift 3...
%% a
load eiffel1.mat

trussplot(xnod,ynod,bars);
hold on
index = 100;
b = zeros(size(A, 2),1);
b(2*index-1) = 1;

x = A\b;

xbel = xnod + x(1:2:end); 
ybel = ynod + x(2:2:end);
disp([xbel(index),xnod(index)])
disp([ybel(index),ybel(index)])

plot(xnod(index), ynod(index), 'ro', 'MarkerSize', 3)
plot(xbel(index), ybel(index), 'bo', 'MarkerSize', 3)

trussplot(xbel,ybel,bars)
%%
load eiffel1.mat
e1Size = size(A,2);
e1Time = calculationTime(A,750);

load eiffel2.mat
e2Size = size(A,2);
e2Time = calculationTime(A,500);

load eiffel3.mat
e3Size = size(A,2);
e3Time = calculationTime(A,50);

load eiffel4.mat
e4Size = size(A,2);
e4Time = calculationTime(A,20);

sizeList = [e1Size, e2Size, e3Size, e4Size];
timeList = [e1Time, e2Time, e3Time, e4Time];
%%
figure(2)
loglog(sizeList,timeList)
grid on
hold on
plot(sizeList(1), timeList(1), 'ro', 'MarkerSize', 3)
plot(sizeList(2), timeList(2), 'ro', 'MarkerSize', 3)
plot(sizeList(3), timeList(3), 'ro', 'MarkerSize', 3)
plot(sizeList(4), timeList(4), 'ro', 'MarkerSize', 3)

x = linspace(sizeList(1),sizeList(end),100);
y1 = x.^3 / sizeList(1)^3 * timeList(1); % +   % timeList(1);
y2 = x.^2 / sizeList(1)^2 * timeList(1);
y3 = x.^2.475 / sizeList(1)^2.475 * timeList(1);
plot(x, y1, x, y2, x, y3)
%% 
figure(3)
load eiffel2.mat

tic;
[jmin, jmax] = kanslighet(A,1);
naivTime = toc;
% disp([jmin, jmax])
tic;
[jmin, jmax] = kanslighet(A,2);
LUTime = toc;
% disp([jmin, jmax])

% disp([naivTime,LUTime])
trussplot(xnod,ynod,bars);
hold on
plot(xnod(jmax), ynod(jmax), 'r*','MarkerSize', 10)
plot(xnod(jmin), ynod(jmin), 'ro','MarkerSize', 10)

%% Tidtabell
load eiffel1.mat
timeRow1Colomn1_4 = timeOfDifferentMethodsForGivenTower(A);
load eiffel2.mat
timeRow2Colomn1_4 = timeOfDifferentMethodsForGivenTower(A);
load eiffel3.mat
timeRow3Colomn1_4 = timeOfDifferentMethodsForGivenTower(A);
load eiffel4.mat
timeRow4Colomn1_4 = timeOfDifferentMethodsForGivenTower(A);
T = [timeRow1Colomn1_4; timeRow2Colomn1_4; timeRow3Colomn1_4; timeRow4Colomn1_4];

% Skapa en 4x4-matris T som innehåller beräkningstiderna.
% Raderna ska motsvara de olika modellerna (eiffel1-eiffel4) och
% kolumnerna de olika metoderna, ordnade som "Naiv", "LU",
% "Gles" och "Gles LU".

% Följande kod skapar en snygg tabell med resultaten:


tab=array2table(T,'VariableNames',{'Naiv' 'LU' 'Gles' 'Gles LU'},'RowNames',{'eiffel1' 'eiffel2' 'eiffel3' 'eiffel4'});
disp(tab);
writetable(tab,'RythmOfTheNightTime')
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function [jmin,jmax]=kanslighet(A,metod)
	if metod == 2
		[L, U] = lu(A);
		A = U;
	end
	minValue = inf;
	maxValue = -inf;
	for nody = 2:2:size(A,1)
		b = zeros(size(A,1),1);
		b(nody) = -1;

		if metod == 2
			b = L \ b;
		end
		x = A\b;

		x_norm = norm(x);
		if x_norm < minValue
			minValue = x_norm;
			jmin = nody/2;
		end

		if x_norm > maxValue
			maxValue = x_norm;
			jmax = nody/2;
		end
    end
end

function time = kanslighetTimed(A,method)
    tic;
    kanslighet(A,method);
    time = toc;
end

%  Indata:
%
%  A     - matrisen
%  metod - villken metod som används:
%          1 = Naiv metod
%          2 = LU-faktorisering
%
%  Utdata:
%
%  jmin - index för minst känsliga nod
%  jmax - index för mest känsliga nod
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% kod...


function time = calculationTime(A,iterations)
    b = randn(size(A, 2),1);
    tic
    for i = [1:iterations]
        x = A\b;
    end
    time = toc/iterations;
    
end

function times = timeOfDifferentMethodsForGivenTower(A)
    time1 = kanslighetTimed(A,1);
    time2 = kanslighetTimed(A,2);
    A = sparse(A);
    time3 = kanslighetTimed(A,1);
    time4 = kanslighetTimed(A,2);
    times = [time1, time2, time3, time4];
end

